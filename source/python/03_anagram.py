def check_anagrams(str1, str2):
    # Remove spaces and convert to lowercase
    str1 = str1.replace(" ", "").lower()
    str2 = str2.replace(" ", "").lower()
    
    # Check if sorted characters of both strings are equal
    return sorted(str1) == sorted(str2)

# Easy Sample Data
print(check_anagrams("listen", "silent"))  # True
print(check_anagrams("hello", "billion"))  # False

# Complex Sample Data
print(check_anagrams("a gentleman", "elegant man"))  # True
print(check_anagrams("The eyes", "They see"))        # True
print(check_anagrams("Dormitory", "Dirty room"))     # True





# Prompt
# code generated by GTP-4
from collections import defaultdict

def find_and_sort_anagrams(words):
    # Create a dictionary to group anagrams
    anagram_groups = defaultdict(list)
    
    # Loop through each word and group them by sorted tuple of characters
    for word in words:
        sorted_word = tuple(sorted(word))
        anagram_groups[sorted_word].append(word)
    
    # Filter groups to only include actual anagrams (more than one word per group)
    anagrams = []
    for group in anagram_groups.values():
        if len(group) > 1:
            anagrams.extend(group)
    
    # Sort the anagrams from A-Z
    anagrams.sort()
    
    return anagrams

# Example usage
words = [ "kiwi", "melon", "apple", "lemon" ]
# words = ["listen", "silent", "enlist", "google", "gooegl", "not", "ton"]
result = find_and_sort_anagrams(words)
print(result)  

# code generated by Mistral Codestral

def find_anagrams(arr):
    # Create a dictionary to group words by their sorted characters
    groups = {}
    for word in arr:
        sorted_word = "".join(sorted(word))
        if sorted_word not in groups:
            groups[sorted_word] = []
        groups[sorted_word].append(word)

    # Find all groups that contain more than one word
    anagrams = []
    for group in groups.values():
        if len(group) > 1:
            anagrams.extend(group)

    # Sort the anagrams and return them
    return sorted(anagrams)

# Test the function
# words = ["cat", "dog", "tac", "god", "good", "act", "goods"]
print(find_anagrams(words))

# Prompt
# code generated by GTP-4o-mini
def are_anagrams(word1, word2):  
    """Check if two words are anagrams."""  
    return sorted(word1) == sorted(word2)  
  
def find_anagrams(words):  
    """Find and return a sorted list of anagrams from the given list of words."""  
    anagrams = set()  # Using a set to avoid duplicates  
    word_dict = {}  
  
    # Create a dictionary to group words by their sorted character tuple  
    for word in words:  
        sorted_word = ''.join(sorted(word))  
        if sorted_word in word_dict:  
            word_dict[sorted_word].append(word)  
        else:  
            word_dict[sorted_word] = [word]  
  
    # Collect words that are anagrams of others  
    for group in word_dict.values():  
        if len(group) > 1:  # Only consider groups with more than one word  
            anagrams.update(group)  
  
    return sorted(anagrams)  
  
# Example Usage  
input_data = ["kiwi", "melon", "apple", "lemon"]  
output = find_anagrams(input_data)  
print(output)  # Output: ['lemon', 'melon']  
